name: OnetimeSecretWorkflow

on:
  push:
    branches:
      - main
      - develop

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    container:
      image: golangci/golangci-lint:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Go dependencies
        uses: actions/cache@v2
        with:
          path: ${{ env.GOPATH }}/pkg/mod
          key: go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-cache-${{ env.GOPATH }}/pkg/mod

      - name: Run linting
        run: golangci-lint run -v

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Run go fmt
        run: go fmt $(go list ./... | grep -v /vendor/)

      - name: Run go vet
        run: go vet $(go list ./... | grep -v /vendor/)

      - name: Run tests
        run: go test -race $(go list ./... | grep -v /vendor/)

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Create output directory
        run: mkdir -p __bin__/${{ env.GITHUB_REPOSITORY }}

      - name: Build binary
        run: go build -o __bin__/${{ env.GITHUB_REPOSITORY }} ./...

      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: binary-artifact
          path: __bin__/${{ env.GITHUB_REPOSITORY }}

  build_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, build]  # Ensure lint, test, and build jobs pass before starting this job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            tag="latest"
            echo "Running on default branch 'main': tag = 'latest'"
          else
            tag="${{ github.ref_slug }}"
            echo "Running on branch '${{ github.ref }}': tag = $tag"
          fi
          docker build --pull -t ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}:${tag} .
          docker push ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}:${tag}
