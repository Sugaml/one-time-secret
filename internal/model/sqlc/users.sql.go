// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashpassword,
  full_name,
  email,
  isactive
) VALUES (
  $1, $2,$3,$4,$5
)
RETURNING id, username, hashpassword, full_name, email, isactive, created_at
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Hashpassword string `json:"hashpassword"`
	FullName     string `json:"full_name"`
	Email        string `json:"email"`
	Isactive     bool   `json:"isactive"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Hashpassword,
		arg.FullName,
		arg.Email,
		arg.Isactive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Hashpassword,
		&i.FullName,
		&i.Email,
		&i.Isactive,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashpassword, full_name, email, isactive, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Hashpassword,
		&i.FullName,
		&i.Email,
		&i.Isactive,
		&i.CreatedAt,
	)
	return i, err
}
